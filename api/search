[{"id":"content:0.index.md","path":"/","dir":"","title":"Home","description":"","keywords":[],"body":"     Elegant Mapbox integration with Nuxt   Create responsive maps using Vue.js components & composables     üèó ¬†Easily add Mapbox to your Nuxt app with Vue components  üåé ¬†useMapbox Composable for easy access  üë∑ ¬†defineMapboxMarker & defineMapboxPopup for making custom components  üéõÔ∏è ¬†defineMapboxControl for creating your own controls  üìñ ¬†Persistent map instances across routes      Features      Nuxt Architecture   Easily create maps in your existing Nuxt 3 projects.    Built for Vue   Create complex maps using familiar Vue.js syntax    Extensible.   Customize every part of Mapbox from any component"},{"id":"content:1.getting-started:1.quick-setup.md","path":"/getting-started/quick-setup","dir":"getting-started","title":"Quick Setup","description":"","keywords":["Quick Setup"],"body":"  Quick Setup   Add   nuxt-mapbox  &   mapbox-gl  dependencies to your project      pnpm   add   -D   nuxt-mapbox   mapbox-gl\n     yarn   add   --dev   nuxt-mapbox   mapbox-gl\n     npm   install   --save-dev   nuxt-mapbox   mapbox-gl\n   Add   nuxt-mapbox  to the   modules  section of   nuxt.config.ts     export   default   defineNuxtConfig  ({\n     modules: [\n       'nuxt-mapbox'\n     ]\n   })\n   Add your Mapbox API key to the   mapbox  section of   nuxt.config.ts     export   default   defineNuxtConfig  ({\n     modules: [\n       'nuxt-mapbox'\n     ],\n     mapbox: {\n       accessToken:   '{API_KEY}'\n     }\n   })\n  html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}"},{"id":"content:1.getting-started:2.basic-usage.md","path":"/getting-started/basic-usage","dir":"getting-started","title":"Basic Usage","description":"","keywords":["Usage"],"body":"  Usage  View the   Mapbox GL JS Docs  for reference.  Map instances are created with components. You can provide all the options through component props  Example:         <  MapboxMap\n         map-id  =  \"{ID}\"\n         style  =  \"position: absolute; top: 0; bottom: 0; left: 250px; width: 500px;\"\n         :options  =  \"{\n           style: 'mapbox://styles/mapbox/light-v11', // style URL\n           center: [-68.137343, 45.137451], // starting position\n           zoom: 5 // starting zoom\n         }\"\n       />\n  You can add Layers, Sources & Controls by nesting their respective components inside the Map  Examples:         <  MapboxMap\n         ...\n       >\n         <  MapboxSource   \n           source-id  =  \"{ID}\"\n           :source  =  \"{\n             type: 'geojson',\n             data: '/test.geojson'\n           }\"\n         />\n         <  MapboxLayer\n           :layer  =  \"{\n             source: '{ID}',\n             id: 'geojson-layer',\n             type: 'fill'\n           }\"\n         />\n         <  MapboxGeolocateControl   position  =  \"top-left\"   />\n       </  MapboxMap  >\n  html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}"},{"id":"content:2.configuration:1.mapbox-config.md","path":"/configuration/mapbox-config","dir":"configuration","title":"Mapbox Config","description":"","keywords":["Mapbox Config","Persistent Map Instances"],"body":"  Mapbox Config  You can configure Mapbox in your   nuxt.config.ts  file under   mapbox . You must provide an API key here for maps to work.  Configuration options can be found in the   Mapbox documentation .\nOnly settings applied directly to   mapboxgl  are configured here. Any map specific properties can be set directly with   useMapbox  at runtime.   Persistent Map Instances  For map instances to be persistent across routes,   keepalive  must be set to   true  in   nuxt.config.ts .\nThis is done by the module automatically, but you can disable it by setting the   persistent  option to   false  in   nuxt.config.ts .   NOTE: Setting   keepalive  to false will not have any effect, so if you need to have it disabled be sure to use   persistent  instead "},{"id":"content:2.configuration:2.configuration-api.md","path":"/configuration/configuration-api","dir":"configuration","title":"Configuration Api","description":"","keywords":["Config"],"body":"  Config    accessToken   baseApiUrl?   workerUrl?   workerCount?   prewarm?   RTLTextPlugin? : True to enable with default, or object defining properties.  persistent?: Enable Map instances persist across routes. This just enables keepAlive. True by default"},{"id":"content:3.usage:1.events.md","path":"/usage/events","dir":"usage","title":"Events","description":"","keywords":["Events"],"body":"  Events  All Map events are accessible directly through the component (With full Typescript support!)  View a list of events in the   Mapbox Docs  Example:         <  MapboxMap\n         ...\n         @load  =  \"exampleFunction\"\n         @click  =  \"exampleFunction\"\n         @resize  =  \"exampleFunction\"\n       >\n  You can access   events directly on layers  as well  Example:         <  MapboxLayer\n         ...\n         @click  =  \"exampleFunction\"\n       >\n  html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}"},{"id":"content:3.usage:2.accessing-map.md","path":"/usage/accessing-map","dir":"usage","title":"Accessing Map","description":"","keywords":["Composables","Refs"],"body":"  Composables  useMapbox  The simplest way to access the map instance on setup is with the useMapbox composable. You must provide the map id.  The map instance will not be available until the page is fully loaded, so you must access it through a callback.         useMapbox  (mapId, (  map  )   =>   {\n         // Do whatever with map here\n       })\n   NOTE: The callback will only be run after the map has loaded (so if you do   map.on('load') , it will not work).  If you want to access the map before it has loaded, there is the   useMapboxBeforeLoad  composable instead.   useMapbox  should be preferred over   useMapboxBeforeLoad  with   map.on('load')  to ensure that your code gets run on reactive updates while the map is already loaded.  useMapboxMarker & useMapboxPopup  You can access your markers and popups in the same way as   useMapbox  with   useMapboxMarker  &   useMapboxPopup !   Refs  When working with the map reactively (for example, in a watcher or computed method), you should instead use the map ref. The refs should be treated similar to Vue   template refs .   It is important to remember that the refs will be undefined until they have been initialized, which will be after the component is mounted.         const   mapRef   =   useMapboxRef  (mapId);\n       const   markerRef   =   useMapboxMarkerRef  (markerId);\n       const   popupRef   =   useMapboxPopupRef  (markerId);\n  html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}"},{"id":"content:3.usage:3.popups-&-markers.md","path":"/usage/popups-and-markers","dir":"usage","title":"Popups & Markers","description":"","keywords":["Linking Popups & Markers"],"body":"  Linking Popups & Markers  You can have a popup linked to a marker by simply nesting the popup component inside the marker.\nExample:         <  MapboxDefaultMarker   \n         marker-id  =  \"marker1\"\n         :options  =  \"{}\"\n         :lnglat  =  \"[110, 5]\"\n       >\n         <  MapboxDefaultPopup\n           popup-id  =  \"popup1\"\n           :lnglat  =  \"[100, 0]\"\n           :options  =  \"{\n             closeOnClick: false\n           }\"\n         >\n           <  h1   class  =  \"test\"  >\n             Hello World!\n           </  h1  >\n         </  MapboxDefaultPopup  >\n       </  MapboxDefaultMarker  >\n  html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}"},{"id":"content:4.advanced:1.custom-components.md","path":"/advanced/custom-components","dir":"advanced","title":"Custom Components","description":"","keywords":["Custom Components"],"body":"  Custom Components  While it is recommended to use the default components, making your own is easy with the built in composables!  Custom Popups & Markers  You can use   defineMapboxPopup  &   defineMapboxMarker  for custom marker & popup components\nBy passing a   template ref  you can put custom html directly into your component.  Be sure to nest your custom components inside a map instance so the map-id can be auto injected. You can also pass the map ID manually into the functions.  If you pass   options  as a ref, the marker or popup will react to changes in settings.  Examples:           const   popup   =   defineMapboxPopup  (popupId, options, templateRef)\n         popup?.  setLngLat  (lnglat)\n   NOTE: Because of the way markers are implemented in Mapbox, if passing a template ref to defineMapboxPopup you have to define properties in a callback like so:         const   markerRef   =   defineMapboxMarker  (markerId, options, templateRef, (  marker  )   =>   {\n           marker.  setLngLat  ([  110  ,   6  ])\n       })\n  Custom Controls  You can make your own control with the defineMapboxControl composable.  Example:         useMapbox  (mapID, (  map  )   =>   {\n           if   (htmlRef.value) {\n               const   control   =   defineMapboxControl  ((  _map  )   =>   {\n                   return   htmlRef.value   as   HTMLElement  ;\n               }, (  map  )   =>   {})\n               map.  addControl  (control);\n           }\n       })\n  Custom Map Component  If you would like to make your own map component, you can use   defineMapboxInstance  Example:         // NOTE: Map instance will be null on server & until it is loaded on client\n       const   map   =   defineMapboxInstance  (  MAP_DIV_ID  , options);\n  Custom Geocoder  If you want to use the geocoder without the map, use   MapboxCustomGeocoder  instead.\nYou can even use your own inputs!  Example:       <  MapboxCustomGeocoder   v-model  =  \"result\"   />\n     <  MapboxCustomGeocoder  >\n       <  input  >\n     </  MapboxCustomGeocoder  >\n       const   result   =   ref  <  MapboxGeocoder  .  Result  >();\n  html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}"}]